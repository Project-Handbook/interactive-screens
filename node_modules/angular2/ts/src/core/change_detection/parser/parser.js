System.register(['angular2/src/core/di/decorators', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', './lexer', 'angular2/src/core/reflection/reflection', './ast'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var decorators_1, lang_1, exceptions_1, collection_1, lexer_1, reflection_1, ast_1;
    var _implicitReceiver, INTERPOLATION_REGEXP, ParseException, SplitInterpolation, Parser, _ParseAST, SimpleExpressionChecker;
    return {
        setters:[
            function (decorators_1_1) {
                decorators_1 = decorators_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lexer_1_1) {
                lexer_1 = lexer_1_1;
            },
            function (reflection_1_1) {
                reflection_1 = reflection_1_1;
            },
            function (ast_1_1) {
                ast_1 = ast_1_1;
            }],
        execute: function() {
            _implicitReceiver = new ast_1.ImplicitReceiver();
            // TODO(tbosch): Cannot make this const/final right now because of the transpiler...
            INTERPOLATION_REGEXP = /\{\{([\s\S]*?)\}\}/g;
            ParseException = (function (_super) {
                __extends(ParseException, _super);
                function ParseException(message, input, errLocation, ctxLocation) {
                    _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
                }
                return ParseException;
            }(exceptions_1.BaseException));
            SplitInterpolation = (function () {
                function SplitInterpolation(strings, expressions) {
                    this.strings = strings;
                    this.expressions = expressions;
                }
                return SplitInterpolation;
            }());
            exports_1("SplitInterpolation", SplitInterpolation);
            Parser = (function () {
                function Parser(/** @internal */ _lexer, providedReflector) {
                    if (providedReflector === void 0) { providedReflector = null; }
                    this._lexer = _lexer;
                    this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
                }
                Parser.prototype.parseAction = function (input, location) {
                    this._checkNoInterpolation(input, location);
                    var tokens = this._lexer.tokenize(input);
                    var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
                    return new ast_1.ASTWithSource(ast, input, location);
                };
                Parser.prototype.parseBinding = function (input, location) {
                    var ast = this._parseBindingAst(input, location);
                    return new ast_1.ASTWithSource(ast, input, location);
                };
                Parser.prototype.parseSimpleBinding = function (input, location) {
                    var ast = this._parseBindingAst(input, location);
                    if (!SimpleExpressionChecker.check(ast)) {
                        throw new ParseException('Host binding expression can only contain field access and constants', input, location);
                    }
                    return new ast_1.ASTWithSource(ast, input, location);
                };
                Parser.prototype._parseBindingAst = function (input, location) {
                    // Quotes expressions use 3rd-party expression language. We don't want to use
                    // our lexer or parser for that, so we check for that ahead of time.
                    var quote = this._parseQuote(input, location);
                    if (lang_1.isPresent(quote)) {
                        return quote;
                    }
                    this._checkNoInterpolation(input, location);
                    var tokens = this._lexer.tokenize(input);
                    return new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
                };
                Parser.prototype._parseQuote = function (input, location) {
                    if (lang_1.isBlank(input))
                        return null;
                    var prefixSeparatorIndex = input.indexOf(':');
                    if (prefixSeparatorIndex == -1)
                        return null;
                    var prefix = input.substring(0, prefixSeparatorIndex).trim();
                    if (!lexer_1.isIdentifier(prefix))
                        return null;
                    var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
                    return new ast_1.Quote(prefix, uninterpretedExpression, location);
                };
                Parser.prototype.parseTemplateBindings = function (input, location) {
                    var tokens = this._lexer.tokenize(input);
                    return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
                };
                Parser.prototype.parseInterpolation = function (input, location) {
                    var split = this.splitInterpolation(input, location);
                    if (split == null)
                        return null;
                    var expressions = [];
                    for (var i = 0; i < split.expressions.length; ++i) {
                        var tokens = this._lexer.tokenize(split.expressions[i]);
                        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
                        expressions.push(ast);
                    }
                    return new ast_1.ASTWithSource(new ast_1.Interpolation(split.strings, expressions), input, location);
                };
                Parser.prototype.splitInterpolation = function (input, location) {
                    var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
                    if (parts.length <= 1) {
                        return null;
                    }
                    var strings = [];
                    var expressions = [];
                    for (var i = 0; i < parts.length; i++) {
                        var part = parts[i];
                        if (i % 2 === 0) {
                            // fixed string
                            strings.push(part);
                        }
                        else if (part.trim().length > 0) {
                            expressions.push(part);
                        }
                        else {
                            throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
                        }
                    }
                    return new SplitInterpolation(strings, expressions);
                };
                Parser.prototype.wrapLiteralPrimitive = function (input, location) {
                    return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
                };
                Parser.prototype._checkNoInterpolation = function (input, location) {
                    var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
                    if (parts.length > 1) {
                        throw new ParseException('Got interpolation ({{}}) where expression was expected', input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
                    }
                };
                Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx) {
                    var errLocation = '';
                    for (var j = 0; j < partInErrIdx; j++) {
                        errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
                    }
                    return errLocation.length;
                };
                Parser = __decorate([
                    decorators_1.Injectable(), 
                    __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
                ], Parser);
                return Parser;
            }());
            exports_1("Parser", Parser);
            _ParseAST = (function () {
                function _ParseAST(input, location, tokens, reflector, parseAction) {
                    this.input = input;
                    this.location = location;
                    this.tokens = tokens;
                    this.reflector = reflector;
                    this.parseAction = parseAction;
                    this.index = 0;
                }
                _ParseAST.prototype.peek = function (offset) {
                    var i = this.index + offset;
                    return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
                };
                Object.defineProperty(_ParseAST.prototype, "next", {
                    get: function () { return this.peek(0); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_ParseAST.prototype, "inputIndex", {
                    get: function () {
                        return (this.index < this.tokens.length) ? this.next.index : this.input.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                _ParseAST.prototype.advance = function () { this.index++; };
                _ParseAST.prototype.optionalCharacter = function (code) {
                    if (this.next.isCharacter(code)) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.optionalKeywordVar = function () {
                    if (this.peekKeywordVar()) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
                _ParseAST.prototype.expectCharacter = function (code) {
                    if (this.optionalCharacter(code))
                        return;
                    this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
                };
                _ParseAST.prototype.optionalOperator = function (op) {
                    if (this.next.isOperator(op)) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.expectOperator = function (operator) {
                    if (this.optionalOperator(operator))
                        return;
                    this.error("Missing expected operator " + operator);
                };
                _ParseAST.prototype.expectIdentifierOrKeyword = function () {
                    var n = this.next;
                    if (!n.isIdentifier() && !n.isKeyword()) {
                        this.error("Unexpected token " + n + ", expected identifier or keyword");
                    }
                    this.advance();
                    return n.toString();
                };
                _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
                    var n = this.next;
                    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
                        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
                    }
                    this.advance();
                    return n.toString();
                };
                _ParseAST.prototype.parseChain = function () {
                    var exprs = [];
                    while (this.index < this.tokens.length) {
                        var expr = this.parsePipe();
                        exprs.push(expr);
                        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            if (!this.parseAction) {
                                this.error("Binding expression cannot contain chained expression");
                            }
                            while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            } // read all semicolons
                        }
                        else if (this.index < this.tokens.length) {
                            this.error("Unexpected token '" + this.next + "'");
                        }
                    }
                    if (exprs.length == 0)
                        return new ast_1.EmptyExpr();
                    if (exprs.length == 1)
                        return exprs[0];
                    return new ast_1.Chain(exprs);
                };
                _ParseAST.prototype.parsePipe = function () {
                    var result = this.parseExpression();
                    if (this.optionalOperator("|")) {
                        if (this.parseAction) {
                            this.error("Cannot have a pipe in an action expression");
                        }
                        do {
                            var name = this.expectIdentifierOrKeyword();
                            var args = [];
                            while (this.optionalCharacter(lexer_1.$COLON)) {
                                args.push(this.parseExpression());
                            }
                            result = new ast_1.BindingPipe(result, name, args);
                        } while (this.optionalOperator("|"));
                    }
                    return result;
                };
                _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
                _ParseAST.prototype.parseConditional = function () {
                    var start = this.inputIndex;
                    var result = this.parseLogicalOr();
                    if (this.optionalOperator('?')) {
                        var yes = this.parsePipe();
                        if (!this.optionalCharacter(lexer_1.$COLON)) {
                            var end = this.inputIndex;
                            var expression = this.input.substring(start, end);
                            this.error("Conditional expression " + expression + " requires all 3 expressions");
                        }
                        var no = this.parsePipe();
                        return new ast_1.Conditional(result, yes, no);
                    }
                    else {
                        return result;
                    }
                };
                _ParseAST.prototype.parseLogicalOr = function () {
                    // '||'
                    var result = this.parseLogicalAnd();
                    while (this.optionalOperator('||')) {
                        result = new ast_1.Binary('||', result, this.parseLogicalAnd());
                    }
                    return result;
                };
                _ParseAST.prototype.parseLogicalAnd = function () {
                    // '&&'
                    var result = this.parseEquality();
                    while (this.optionalOperator('&&')) {
                        result = new ast_1.Binary('&&', result, this.parseEquality());
                    }
                    return result;
                };
                _ParseAST.prototype.parseEquality = function () {
                    // '==','!=','===','!=='
                    var result = this.parseRelational();
                    while (true) {
                        if (this.optionalOperator('==')) {
                            result = new ast_1.Binary('==', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('===')) {
                            result = new ast_1.Binary('===', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('!=')) {
                            result = new ast_1.Binary('!=', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('!==')) {
                            result = new ast_1.Binary('!==', result, this.parseRelational());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseRelational = function () {
                    // '<', '>', '<=', '>='
                    var result = this.parseAdditive();
                    while (true) {
                        if (this.optionalOperator('<')) {
                            result = new ast_1.Binary('<', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('>')) {
                            result = new ast_1.Binary('>', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('<=')) {
                            result = new ast_1.Binary('<=', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('>=')) {
                            result = new ast_1.Binary('>=', result, this.parseAdditive());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseAdditive = function () {
                    // '+', '-'
                    var result = this.parseMultiplicative();
                    while (true) {
                        if (this.optionalOperator('+')) {
                            result = new ast_1.Binary('+', result, this.parseMultiplicative());
                        }
                        else if (this.optionalOperator('-')) {
                            result = new ast_1.Binary('-', result, this.parseMultiplicative());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseMultiplicative = function () {
                    // '*', '%', '/'
                    var result = this.parsePrefix();
                    while (true) {
                        if (this.optionalOperator('*')) {
                            result = new ast_1.Binary('*', result, this.parsePrefix());
                        }
                        else if (this.optionalOperator('%')) {
                            result = new ast_1.Binary('%', result, this.parsePrefix());
                        }
                        else if (this.optionalOperator('/')) {
                            result = new ast_1.Binary('/', result, this.parsePrefix());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parsePrefix = function () {
                    if (this.optionalOperator('+')) {
                        return this.parsePrefix();
                    }
                    else if (this.optionalOperator('-')) {
                        return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
                    }
                    else if (this.optionalOperator('!')) {
                        return new ast_1.PrefixNot(this.parsePrefix());
                    }
                    else {
                        return this.parseCallChain();
                    }
                };
                _ParseAST.prototype.parseCallChain = function () {
                    var result = this.parsePrimary();
                    while (true) {
                        if (this.optionalCharacter(lexer_1.$PERIOD)) {
                            result = this.parseAccessMemberOrMethodCall(result, false);
                        }
                        else if (this.optionalOperator('?.')) {
                            result = this.parseAccessMemberOrMethodCall(result, true);
                        }
                        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
                            var key = this.parsePipe();
                            this.expectCharacter(lexer_1.$RBRACKET);
                            if (this.optionalOperator("=")) {
                                var value = this.parseConditional();
                                result = new ast_1.KeyedWrite(result, key, value);
                            }
                            else {
                                result = new ast_1.KeyedRead(result, key);
                            }
                        }
                        else if (this.optionalCharacter(lexer_1.$LPAREN)) {
                            var args = this.parseCallArguments();
                            this.expectCharacter(lexer_1.$RPAREN);
                            result = new ast_1.FunctionCall(result, args);
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parsePrimary = function () {
                    if (this.optionalCharacter(lexer_1.$LPAREN)) {
                        var result = this.parsePipe();
                        this.expectCharacter(lexer_1.$RPAREN);
                        return result;
                    }
                    else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
                        this.advance();
                        return new ast_1.LiteralPrimitive(null);
                    }
                    else if (this.next.isKeywordTrue()) {
                        this.advance();
                        return new ast_1.LiteralPrimitive(true);
                    }
                    else if (this.next.isKeywordFalse()) {
                        this.advance();
                        return new ast_1.LiteralPrimitive(false);
                    }
                    else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
                        var elements = this.parseExpressionList(lexer_1.$RBRACKET);
                        this.expectCharacter(lexer_1.$RBRACKET);
                        return new ast_1.LiteralArray(elements);
                    }
                    else if (this.next.isCharacter(lexer_1.$LBRACE)) {
                        return this.parseLiteralMap();
                    }
                    else if (this.next.isIdentifier()) {
                        return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
                    }
                    else if (this.next.isNumber()) {
                        var value = this.next.toNumber();
                        this.advance();
                        return new ast_1.LiteralPrimitive(value);
                    }
                    else if (this.next.isString()) {
                        var literalValue = this.next.toString();
                        this.advance();
                        return new ast_1.LiteralPrimitive(literalValue);
                    }
                    else if (this.index >= this.tokens.length) {
                        this.error("Unexpected end of expression: " + this.input);
                    }
                    else {
                        this.error("Unexpected token " + this.next);
                    }
                    // error() throws, so we don't reach here.
                    throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
                };
                _ParseAST.prototype.parseExpressionList = function (terminator) {
                    var result = [];
                    if (!this.next.isCharacter(terminator)) {
                        do {
                            result.push(this.parsePipe());
                        } while (this.optionalCharacter(lexer_1.$COMMA));
                    }
                    return result;
                };
                _ParseAST.prototype.parseLiteralMap = function () {
                    var keys = [];
                    var values = [];
                    this.expectCharacter(lexer_1.$LBRACE);
                    if (!this.optionalCharacter(lexer_1.$RBRACE)) {
                        do {
                            var key = this.expectIdentifierOrKeywordOrString();
                            keys.push(key);
                            this.expectCharacter(lexer_1.$COLON);
                            values.push(this.parsePipe());
                        } while (this.optionalCharacter(lexer_1.$COMMA));
                        this.expectCharacter(lexer_1.$RBRACE);
                    }
                    return new ast_1.LiteralMap(keys, values);
                };
                _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
                    if (isSafe === void 0) { isSafe = false; }
                    var id = this.expectIdentifierOrKeyword();
                    if (this.optionalCharacter(lexer_1.$LPAREN)) {
                        var args = this.parseCallArguments();
                        this.expectCharacter(lexer_1.$RPAREN);
                        var fn = this.reflector.method(id);
                        return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) :
                            new ast_1.MethodCall(receiver, id, fn, args);
                    }
                    else {
                        if (isSafe) {
                            if (this.optionalOperator("=")) {
                                this.error("The '?.' operator cannot be used in the assignment");
                            }
                            else {
                                return new ast_1.SafePropertyRead(receiver, id, this.reflector.getter(id));
                            }
                        }
                        else {
                            if (this.optionalOperator("=")) {
                                if (!this.parseAction) {
                                    this.error("Bindings cannot contain assignments");
                                }
                                var value = this.parseConditional();
                                return new ast_1.PropertyWrite(receiver, id, this.reflector.setter(id), value);
                            }
                            else {
                                return new ast_1.PropertyRead(receiver, id, this.reflector.getter(id));
                            }
                        }
                    }
                    return null;
                };
                _ParseAST.prototype.parseCallArguments = function () {
                    if (this.next.isCharacter(lexer_1.$RPAREN))
                        return [];
                    var positionals = [];
                    do {
                        positionals.push(this.parsePipe());
                    } while (this.optionalCharacter(lexer_1.$COMMA));
                    return positionals;
                };
                _ParseAST.prototype.parseBlockContent = function () {
                    if (!this.parseAction) {
                        this.error("Binding expression cannot contain chained expression");
                    }
                    var exprs = [];
                    while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
                        var expr = this.parseExpression();
                        exprs.push(expr);
                        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            } // read all semicolons
                        }
                    }
                    if (exprs.length == 0)
                        return new ast_1.EmptyExpr();
                    if (exprs.length == 1)
                        return exprs[0];
                    return new ast_1.Chain(exprs);
                };
                /**
                 * An identifier, a keyword, a string with an optional `-` inbetween.
                 */
                _ParseAST.prototype.expectTemplateBindingKey = function () {
                    var result = '';
                    var operatorFound = false;
                    do {
                        result += this.expectIdentifierOrKeywordOrString();
                        operatorFound = this.optionalOperator('-');
                        if (operatorFound) {
                            result += '-';
                        }
                    } while (operatorFound);
                    return result.toString();
                };
                _ParseAST.prototype.parseTemplateBindings = function () {
                    var bindings = [];
                    var prefix = null;
                    while (this.index < this.tokens.length) {
                        var keyIsVar = this.optionalKeywordVar();
                        var key = this.expectTemplateBindingKey();
                        if (!keyIsVar) {
                            if (prefix == null) {
                                prefix = key;
                            }
                            else {
                                key = prefix + key[0].toUpperCase() + key.substring(1);
                            }
                        }
                        this.optionalCharacter(lexer_1.$COLON);
                        var name = null;
                        var expression = null;
                        if (keyIsVar) {
                            if (this.optionalOperator("=")) {
                                name = this.expectTemplateBindingKey();
                            }
                            else {
                                name = '\$implicit';
                            }
                        }
                        else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
                            var start = this.inputIndex;
                            var ast = this.parsePipe();
                            var source = this.input.substring(start, this.inputIndex);
                            expression = new ast_1.ASTWithSource(ast, source, this.location);
                        }
                        bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
                        if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            this.optionalCharacter(lexer_1.$COMMA);
                        }
                    }
                    return bindings;
                };
                _ParseAST.prototype.error = function (message, index) {
                    if (index === void 0) { index = null; }
                    if (lang_1.isBlank(index))
                        index = this.index;
                    var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
                        "at the end of the expression";
                    throw new ParseException(message, this.input, location, this.location);
                };
                return _ParseAST;
            }());
            exports_1("_ParseAST", _ParseAST);
            SimpleExpressionChecker = (function () {
                function SimpleExpressionChecker() {
                    this.simple = true;
                }
                SimpleExpressionChecker.check = function (ast) {
                    var s = new SimpleExpressionChecker();
                    ast.visit(s);
                    return s.simple;
                };
                SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
                SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
                SimpleExpressionChecker.prototype.visitPropertyRead = function (ast) { };
                SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
                SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
                SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitKeyedRead = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitAll = function (asts) {
                    var res = collection_1.ListWrapper.createFixedSize(asts.length);
                    for (var i = 0; i < asts.length; ++i) {
                        res[i] = asts[i].visit(this);
                    }
                    return res;
                };
                SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitQuote = function (ast) { this.simple = false; };
                return SimpleExpressionChecker;
            }());
        }
    }
});
//# sourceMappingURL=parser.js.map